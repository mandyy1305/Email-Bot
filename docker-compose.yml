services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: email-bot-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: email-bot
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - email-bot-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/email-bot --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: email-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - email-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: email-bot-backend
    restart: unless-stopped
    env_file:
      - docker.env
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/email-bot?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EMAIL_DELAY_SECONDS: 5
      QUEUE_CONCURRENCY: 1
      # SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      # SMTP_PORT: ${SMTP_PORT:-587}
      # SMTP_USER: ${SMTP_USER}
      # SMTP_PASSWORD: ${SMTP_PASSWORD}
      # EMAIL_FROM: ${EMAIL_FROM}
      # EMAIL_SENDER_NAME: ${EMAIL_SENDER_NAME:-Email Bot}
      # JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      # SESSION_SECRET: ${SESSION_SECRET:-your-session-secret}
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - email-bot-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Email Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: email-bot-worker
    restart: unless-stopped
    env_file:
      - docker.env
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/email-bot?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EMAIL_DELAY_SECONDS: 5
      QUEUE_CONCURRENCY: 1
      # SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      # SMTP_PORT: ${SMTP_PORT:-587}
      # SMTP_USER: ${SMTP_USER}
      # SMTP_PASSWORD: ${SMTP_PASSWORD}
      # EMAIL_FROM: ${EMAIL_FROM}
      # EMAIL_SENDER_NAME: ${EMAIL_SENDER_NAME:-Email Bot}
      LOG_LEVEL: info
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - email-bot-network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "emailWorker.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: email-bot-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - email-bot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB Express (Database Admin Interface)
  mongo-express:
    image: mongo-express:latest
    container_name: email-bot-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - email-bot-network
    profiles:
      - dev

  # Redis Commander (Redis Admin Interface)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: email-bot-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - email-bot-network
    profiles:
      - dev

networks:
  email-bot-network:
    driver: bridge
    name: email-bot-network

volumes:
  mongodb_data:
    name: email-bot-mongodb-data
  redis_data:
    name: email-bot-redis-data
  backend_uploads:
    name: email-bot-backend-uploads
  backend_logs:
    name: email-bot-backend-logs